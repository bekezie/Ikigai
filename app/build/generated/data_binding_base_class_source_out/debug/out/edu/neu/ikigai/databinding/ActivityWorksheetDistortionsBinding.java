// Generated by view binder compiler. Do not edit!
package edu.neu.ikigai.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import edu.neu.ikigai.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityWorksheetDistortionsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView cognitiveDistortionsTitle;

  @NonNull
  public final CheckBox distortionAllOrNothingThinking;

  @NonNull
  public final CheckBox distortionCatastrophizingAndMinimizing;

  @NonNull
  public final CheckBox distortionEmotionalReasoning;

  @NonNull
  public final CheckBox distortionFortuneTelling;

  @NonNull
  public final CheckBox distortionMentalFiltering;

  @NonNull
  public final CheckBox distortionMindReading;

  @NonNull
  public final Button distortionNextButton;

  @NonNull
  public final CheckBox distortionOvergeneralizing;

  @NonNull
  public final Button distortionSaveButton;

  @NonNull
  public final ScrollView distortionScrollView;

  @NonNull
  public final CheckBox distortionShouldStatements;

  @NonNull
  public final TextView worksheetTitle;

  private ActivityWorksheetDistortionsBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView cognitiveDistortionsTitle, @NonNull CheckBox distortionAllOrNothingThinking,
      @NonNull CheckBox distortionCatastrophizingAndMinimizing,
      @NonNull CheckBox distortionEmotionalReasoning, @NonNull CheckBox distortionFortuneTelling,
      @NonNull CheckBox distortionMentalFiltering, @NonNull CheckBox distortionMindReading,
      @NonNull Button distortionNextButton, @NonNull CheckBox distortionOvergeneralizing,
      @NonNull Button distortionSaveButton, @NonNull ScrollView distortionScrollView,
      @NonNull CheckBox distortionShouldStatements, @NonNull TextView worksheetTitle) {
    this.rootView = rootView;
    this.cognitiveDistortionsTitle = cognitiveDistortionsTitle;
    this.distortionAllOrNothingThinking = distortionAllOrNothingThinking;
    this.distortionCatastrophizingAndMinimizing = distortionCatastrophizingAndMinimizing;
    this.distortionEmotionalReasoning = distortionEmotionalReasoning;
    this.distortionFortuneTelling = distortionFortuneTelling;
    this.distortionMentalFiltering = distortionMentalFiltering;
    this.distortionMindReading = distortionMindReading;
    this.distortionNextButton = distortionNextButton;
    this.distortionOvergeneralizing = distortionOvergeneralizing;
    this.distortionSaveButton = distortionSaveButton;
    this.distortionScrollView = distortionScrollView;
    this.distortionShouldStatements = distortionShouldStatements;
    this.worksheetTitle = worksheetTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityWorksheetDistortionsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityWorksheetDistortionsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_worksheet_distortions, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityWorksheetDistortionsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cognitiveDistortionsTitle;
      TextView cognitiveDistortionsTitle = ViewBindings.findChildViewById(rootView, id);
      if (cognitiveDistortionsTitle == null) {
        break missingId;
      }

      id = R.id.distortion_allOrNothingThinking;
      CheckBox distortionAllOrNothingThinking = ViewBindings.findChildViewById(rootView, id);
      if (distortionAllOrNothingThinking == null) {
        break missingId;
      }

      id = R.id.distortion_catastrophizingAndMinimizing;
      CheckBox distortionCatastrophizingAndMinimizing = ViewBindings.findChildViewById(rootView, id);
      if (distortionCatastrophizingAndMinimizing == null) {
        break missingId;
      }

      id = R.id.distortion_emotionalReasoning;
      CheckBox distortionEmotionalReasoning = ViewBindings.findChildViewById(rootView, id);
      if (distortionEmotionalReasoning == null) {
        break missingId;
      }

      id = R.id.distortion_fortuneTelling;
      CheckBox distortionFortuneTelling = ViewBindings.findChildViewById(rootView, id);
      if (distortionFortuneTelling == null) {
        break missingId;
      }

      id = R.id.distortion_mentalFiltering;
      CheckBox distortionMentalFiltering = ViewBindings.findChildViewById(rootView, id);
      if (distortionMentalFiltering == null) {
        break missingId;
      }

      id = R.id.distortion_mindReading;
      CheckBox distortionMindReading = ViewBindings.findChildViewById(rootView, id);
      if (distortionMindReading == null) {
        break missingId;
      }

      id = R.id.distortionNextButton;
      Button distortionNextButton = ViewBindings.findChildViewById(rootView, id);
      if (distortionNextButton == null) {
        break missingId;
      }

      id = R.id.distortion_overgeneralizing;
      CheckBox distortionOvergeneralizing = ViewBindings.findChildViewById(rootView, id);
      if (distortionOvergeneralizing == null) {
        break missingId;
      }

      id = R.id.distortionSaveButton;
      Button distortionSaveButton = ViewBindings.findChildViewById(rootView, id);
      if (distortionSaveButton == null) {
        break missingId;
      }

      id = R.id.distortionScrollView;
      ScrollView distortionScrollView = ViewBindings.findChildViewById(rootView, id);
      if (distortionScrollView == null) {
        break missingId;
      }

      id = R.id.distortion_shouldStatements;
      CheckBox distortionShouldStatements = ViewBindings.findChildViewById(rootView, id);
      if (distortionShouldStatements == null) {
        break missingId;
      }

      id = R.id.worksheetTitle;
      TextView worksheetTitle = ViewBindings.findChildViewById(rootView, id);
      if (worksheetTitle == null) {
        break missingId;
      }

      return new ActivityWorksheetDistortionsBinding((ConstraintLayout) rootView,
          cognitiveDistortionsTitle, distortionAllOrNothingThinking,
          distortionCatastrophizingAndMinimizing, distortionEmotionalReasoning,
          distortionFortuneTelling, distortionMentalFiltering, distortionMindReading,
          distortionNextButton, distortionOvergeneralizing, distortionSaveButton,
          distortionScrollView, distortionShouldStatements, worksheetTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
